#!/usr/bin/env node

var fs = require('fs-extra');
var assign = require('object-assign-deep');
var exists = fs.existsSync;
var logger = require('./logger');
var suitcss = require('..');
var path = require('path');
var resolve = path.resolve;
var program = require('commander');
var read = require('read-file-stdin');
var chokidar = require('chokidar');
var writeFileSync = fs.outputFileSync;

/**
 * Usage.
 */

program
  .usage('[<input>] [<output>]')
  .option('-c, --config [path]', 'a custom PostCSS config file')
  .option('-i, --import-root [path]', 'the root directory for imported css files')
  .option('-s, --encapsulate', 'encapsulate component styles')
  .option('-w, --watch', 'watch the input file and any imports for changes')
  .option('-m, --minify', 'minify output with cssnano')
  .option('-e, --throw-error', 'throw an error when any warnings are found')
  .option('-L, --no-lint', 'disable stylelint and postcss-bem-linter')
  .option('-v, --verbose', 'log verbose output for debugging')
  .version(require('../package.json').version);


/**
 * Examples.
 */

program.on('--help', function() {
  console.log('  Examples:');
  console.log();
  console.log('    # pass an input and output file:');
  console.log('    $ suitcss input.css output.css');
  console.log();
  console.log('    # configure the import root directory:');
  console.log('    $ suitcss --import-root src/css input.css output.css');
  console.log();
  console.log('    # watch the input file and imports for changes:');
  console.log('    $ suitcss --watch input.css output.css');
  console.log();
  console.log('    # configure postcss plugins with a config file:');
  console.log('    $ suitcss --config config.js input.css output.css');
  console.log();
  console.log('    # unix-style piping to stdin and stdout:');
  console.log('    $ cat input.css | suitcss | grep background-color');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

/**
 * Settings.
 */

var input = program.args[0] ? resolve(program.args[0]) : null;
var output = program.args[1] ? resolve(program.args[1]) : null;
var config = program.config ? require(resolve(program.config)) : null;
var verbose = program.verbose;
var regen = program.watch && input && output;

/**
 * Exists?
 */

if (input && !exists(input)) logger.fatal('not found', input);

/**
 * Run.
 */

run();

/**
 * Watch
 */

var currentWatchedFiles;
if (regen) {
  var watcher = chokidar.watch(input);
  watcher.on('change', run);
  watcher.on('change', function(file) {
    if (verbose) logger.log(path.basename(file) + ' changed');
  });
  watcher.on('ready', function() {
    if (verbose) logger.log('Watching ' + path.basename(input));
  });

  global.watchCSS = function(imported) {
    watcher.unwatch(currentWatchedFiles);
    watcher.add(imported);
    currentWatchedFiles = imported;
  };
}

/**
 * Run for the given input and output.
 */
function run() {
  read(input, function(err, buffer) {
    if (err) logger.throw(err);
    var css = buffer.toString();
    var flags = [
      'minify',
      'encapsulate',
      'root',
      'lint'
    ].reduce(function (accumulator, flag) {
      if (({}).hasOwnProperty.call(program, flag)) {
        accumulator[flag] = program[flag];
      }
      return accumulator;
    }, {});
    var opts = assign({}, config, flags);

    if (program.throwError) {
      assign(opts, {
        'postcss-reporter': {
          throwError: true
        }
      });
    }

    suitcss(css, opts, input).then(function(result) {
      if (output) {
        writeFileSync(output, result.css + '\n');
      } else {
        console.log(result.css);
      }
      if (verbose && output) logger.log('write', output);
    }).catch(function(e) {
      logger.throw(e);
    });
  });
}
